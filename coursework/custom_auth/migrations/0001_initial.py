# Generated by Django 4.2.7 on 2024-04-08 11:55

import custom_auth.managers
from django.db import migrations, models
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=255, verbose_name='Имя')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region='RU', unique=True, verbose_name='Номер телефона')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Дата последнего входа')),
                ('is_active', models.BooleanField(default=False, verbose_name='Пользователь подтверждён')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Является сотрудником')),
                ('history', models.TextField(blank=True, verbose_name='История бронирования')),
                ('type_user', models.CharField(default='Пользователь', verbose_name='Тип пользователя')),
                ('city', models.TextField(default='', verbose_name='Выбранный город')),
                ('notifications', models.TextField(blank=True, verbose_name='Уведомления (Заголовок~Текст~Статус~Дата)')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', custom_auth.managers.UserManager()),
            ],
        ),
    ]
